# Example of using the code parsing module

import custom_parser

lines, comments, code = custom_parser.parse_code("bruh.py", '# -*- coding: utf-8 -*-\n\nfrom .models import AlexaUser, Tip, Compliment\nimport statistics as stat\nimport math\nimport random\n\ndef getResponseType(data):\n\n    # If it was a 0 day it is automatically critical\n    if(data[0] < 3):\n        return getTip(Tip.LEVEL_CRITICAL)\n\n    processable = []\n\n    # Get the data for the most recent three days\n    # These have the greatest emphasis on the ouput of this function\n    for element in data[0:3]:\n        if element is not None:\n            processable.append(element)\n\n    if len(processable) == 3:\n        # Get the average for the last 3 days\n        mean_3 = stat.mean(processable)\n    elif len(processable) == 1:\n        return getTip(Tip.LEVEL_NONE)\n    else:\n        # If not enough data set value to None to indicate this\n        mean_3 = None\n\n    # Start assigning response objects\n    # 0-3 is a poor,\n    # 4-6 is a medium/mixed\n    # 7-9 is a high\n    if data[0] < 4 and mean_3 > 4.5:\n        return getTip(Tip.LEVEL_CRITICAL)\n    elif data[0] < 5:\n        return getTip(Tip.LEVEL_LOW)\n    elif data[0] < 8:\n        return getTip(Tip.LEVEL_MEDIUM)\n    else:\n        return getTip(Tip.LEVEL_GOOD)\n\n\n\n\n# Pulls the user with the given userId, if no user exists it will create a new user.\ndef getOrNewUser(userId):\n    try:\n        user = AlexaUser.objects.get(pk=userId)\n    except AlexaUser.DoesNotExist:\n        user = AlexaUser.objects.create(user_id=userId, wellness_record="")\n        user.save()\n    return user\n\n# Appends data to a known user that for sure exists in the database (i.e. pulled already)\ndef appendDataToUserObject(day, user):\n    if(len(user.wellness_record) > 0):\n        lastDay = user.wellness_record[-1]\n        if ord(lastDay) > 0xF:\n            user.wellness_record = user.wellness_record + encodeData(day)\n        else:\n            user.wellness_record = user.wellness_record + encodeData(day, base=ord(lastDay))\n    else:\n        user.wellness_record = user.wellness_record + encodeData(day)\n\n    user.save()\n\ndef encodeData(data, base=-1):\n    if data > 0xF:\n        data = 0xB\n    elif data is None:\n        data = 0xB\n\n    if base != -1:\n        data = data << 4\n        if base > 0xF:\n            base = 0xB\n        elif base is None:\n            base = 0xB\n        return chr(data + base)\n    else:\n        return chr(data)\n\n\n\n\ndef decodeData(data):\n    res = []\n    # Loop through each hex value\n    for character in map(ord, data):\n        if character < 0x10:\n            if character > 0x0 and character <= 0xA:\n                res.append(int(character))\n            elif character == 0xB:\n                res.append(None)\n            else:\n                # TODO HANDLE MORE SPECIAL CASE CHARACTERS LATER\n                res.append(None)\n        else:\n            for x in [1, 0]:\n                hx = (character & (0b1111 << (4*x))) >> (4*x)\n                if hx > 0x0 and hx <= 0xA:\n                    res.append(int(hx))\n                elif hx == 0xB:\n                    res.append(None)\n                else:\n                    # TODO HANDLE MORE SPECIAL CASE CHARACTERS LATER\n                    res.append(None)\n    return res\n\n\ndef getTip(tip_level):\n    tips = Tip.objects.filter(level=tip_level)\n    max_tip_index = len(tips)\n    if len(max_tip_index == 1):\n        return tips[0]\n    return tips[random.randint(0, max_tip_index - 1)]\n\n\ndef getCompliment():\n    comp = Compliment.objects.all()\n    max_comp_index = len(comp)\n    return comp[random.randint(0, max_comp_index - 1)]\n\n\ndef response_template():\n    response_dict = {\n        "version": "1.0",\n        "response": {\n            "outputSpeech": {\n                "type": "PlainText",\n                "text": ""\n            },\n        },\n    }\n\n    return response_dict\n\n\ndef parseRequest(postRequest):\n    request = {\n        "userId": postRequest["session"][\'user\']["userId"],\n        "intentType": postRequest["request"]["type"]\n    }\n\n    if postRequest["request"]["type"] == "IntentRequest":\n        request["name"] = postRequest["request"]["intent"]["name"]\n        if postRequest["request"]["intent"]["name"] == "Start":\n            request["rate"] = postRequest["request"]["intent"]["slots"]["rate"]["value"]\n\n    return request\n\n')

print("Lines: " + str(lines))
print("comments: " + str(comments))
print("Code: " + str(code))
